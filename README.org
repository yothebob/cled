* Cled 

** examples

# playing with a file
#+begin_src common-lisp
(ql:quickload "cled")
(in-package 'cled)
(load-file) ;; ./rope.py
(getf (cled::get-buffer (cled::where :name "rope.py")) :name) ;; "rope.py"
(nth 1 (getf (cled::get-buffer (cled::where :name "rope.py")) :contents)) ;; "# Python program to concatenate two strings using"
#+end_src

# update and save a line
#+begin_src common-lisp
(cled::load-file) ;;./rope.py
(setf (nth 1 (getf (cled::get-buffer (cled::where :name "rope.py")) :contents)) "#this is a test")
(cled::write-contents (cled::get-buffer (cled::where :name "rope.py")))

;; OR

(cled::load-file) ;;./rope.py
(cled::update-buffer-line (cled::get-buffer (cled::where :name "rope.py")) :line 3 :write t)  ;; input line from user

;; OR 

(cled::load-file) ;;./rope.py
(cled::update-buffer-line (cled::get-buffer (cled::where :name "rope.py")) :line 3 :content "write content here" :write t)

#+end_src

# NOTE: :line 3 will edit line #4 because 0 indexing

** Usage

** Installation

** TODO features

- [ ] CLI
- [ ] eval common lisp
- [ ] eval common lisp on line
- [ ] set current buffer
- [ ] lock file? or at least optional update file on external change
- [ ] switch buffers
- [ ] regex?
- [ ] init file with custom functions
- [ ] hooks (for saving & loading)
- [ ] major modes?
- [ ] line editing
  - find & replace
  
